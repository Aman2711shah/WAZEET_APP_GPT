import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class FreezoneSelectionPage extends StatefulWidget {
  const FreezoneSelectionPage({super.key});

  @override
  State<FreezoneSelectionPage> createState() => _FreezoneSelectionPageState();
}

class _FreezoneSelectionPageState extends State<FreezoneSelectionPage> {
  final TextEditingController _activityController = TextEditingController();

  // Multiple activities support (up to 3)
  List<Map<String, String>> _selectedActivities = [];
  int _selectedActivityCount = 1;

  int _selectedVisaCount = 1;
  String _selectedEmirate = 'Entire UAE';
  bool _isSearching = false;
  List<Map<String, dynamic>> _searchResults = [];
  List<Map<String, dynamic>> _packageResults = [];
  bool _isLoadingPackages = false;

  // Debouncing variables
  DateTime? _lastSearchTime;
  String? _lastSearchQuery;
  final List<String> _emirates = [
    'Entire UAE',
    'Abu Dhabi',
    'Dubai',
    'Sharjah',
    'Ajman',
    'Umm Al Quwain',
    'Ras Al Khaimah',
    'Fujairah',
  ];

  final List<int> _visaCounts = [1, 2, 3, 4, 5, 6, 7];

  @override
  void dispose() {
    _activityController.dispose();
    super.dispose();
  }

  // Enhanced search with debouncing and fuzzy matching
  Future<void> _searchActivities(String query) async {
    // Clear results if query is empty
    if (query.trim().isEmpty) {
      setState(() {
        _searchResults = [];
        _isSearching = false;
      });
      return;
    }

    // Debouncing: wait 300ms before searching
    final now = DateTime.now();
    _lastSearchTime = now;
    _lastSearchQuery = query;

    // Wait for 300ms to see if user is still typing
    await Future.delayed(const Duration(milliseconds: 300));

    // If the query has changed or time has changed, don't proceed
    if (_lastSearchQuery != query || _lastSearchTime != now) {
      return;
    }

    setState(() {
      _isSearching = true;
    });

    try {
      // Search in Activity list collection
      final snapshot = await FirebaseFirestore.instance
          .collection('Activity list')
          .limit(50) // Increased limit for better results
          .get();

      final searchQuery = query.toLowerCase().trim();
      final searchTokens = searchQuery
          .split(' ')
          .where((t) => t.isNotEmpty)
          .toList();

      final results = snapshot.docs
          .map((doc) {
            final data = doc.data();
            final activityName = (data['Activity Name'] ?? '').toString();
            final activityNameLower = activityName.toLowerCase();
            final description = (data['Description'] ?? '')
                .toString()
                .toLowerCase();
            final sector = (data['Sector'] ?? '').toString().toLowerCase();

            // Create searchable tokens from activity name
            final activityTokens = activityNameLower
                .split(RegExp(r'[\s,\-/()]+'))
                .where((t) => t.isNotEmpty)
                .toList();

            // Calculate relevance score
            int relevanceScore = 0;

            // Exact match gets highest score
            if (activityNameLower == searchQuery) {
              relevanceScore = 1000;
            }
            // Starts with query gets high score
            else if (activityNameLower.startsWith(searchQuery)) {
              relevanceScore = 900;
            }
            // Contains full query gets good score
            else if (activityNameLower.contains(searchQuery)) {
              relevanceScore = 800;
            }
            // Token-based matching
            else {
              for (var token in activityTokens) {
                for (var searchToken in searchTokens) {
                  // Exact token match
                  if (token == searchToken) {
                    relevanceScore += 100;
                  }
                  // Token starts with search token
                  else if (token.startsWith(searchToken)) {
                    relevanceScore += 70;
                  }
                  // Token contains search token
                  else if (token.contains(searchToken)) {
                    relevanceScore += 50;
                  }
                  // Fuzzy match (Levenshtein-like)
                  else if (_isFuzzyMatch(token, searchToken)) {
                    relevanceScore += 30;
                  }
                }
              }

              // Also search in description and sector
              if (description.contains(searchQuery)) {
                relevanceScore += 40;
              }
              if (sector.contains(searchQuery)) {
                relevanceScore += 60;
              }
            }

            if (relevanceScore > 0) {
              return {
                'id': doc.id,
                'name': activityName,
                'description': data['Description'] ?? '',
                'sector': data['Sector'] ?? '',
                'activityCode': data['Activity Master Number'] ?? '',
                'relevance': relevanceScore,
              };
            }
            return null;
          })
          .where((result) => result != null)
          .cast<Map<String, dynamic>>()
          .toList();

      // Sort by relevance score (highest first)
      results.sort(
        (a, b) => (b['relevance'] as int).compareTo(a['relevance'] as int),
      );

      setState(() {
        _searchResults = results.take(10).toList(); // Show top 10 results
        _isSearching = false;
      });
    } catch (e) {
      setState(() {
        _isSearching = false;
      });
      if (mounted) {
        String errorMessage = 'Error searching activities';
        if (e.toString().contains('permission-denied')) {
          errorMessage =
              'Permission denied. Please update Firestore security rules to allow read access to "Activity list" collection.';
        }
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text(errorMessage),
            duration: const Duration(seconds: 5),
            action: SnackBarAction(
              label: 'Help',
              onPressed: () {
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: const Text('Fix Required'),
                    content: const SingleChildScrollView(
                      child: Text(
                        'To fix this error:\n\n'
                        '1. Go to Firebase Console\n'
                        '2. Select Firestore Database > Rules\n'
                        '3. Add this rule:\n\n'
                        'match /Activity list/{document=**} {\n'
                        '  allow read: if true;\n'
                        '}\n\n'
                        'match /freezone_packages/{document=**} {\n'
                        '  allow read: if true;\n'
                        '}\n\n'
                        '4. Click Publish',
                        style: TextStyle(fontSize: 12),
                      ),
                    ),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.pop(context),
                        child: const Text('OK'),
                      ),
                    ],
                  ),
                );
              },
            ),
          ),
        );
      }
    }
  }

  Future<void> _findPackages() async {
    if (_selectedActivities.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select at least one activity')),
      );
      return;
    }

    setState(() {
      _isLoadingPackages = true;
      _packageResults = [];
    });

    try {
      // Fetch all packages first (since Firestore web has limitations)
      var query = FirebaseFirestore.instance.collection('freezone_packages');

      final snapshot = await query.get();

      // Filter results in-memory
      final results = snapshot.docs
          .where((doc) {
            final data = doc.data();

            // Check visa count compatibility
            final visasIncluded = _parseVisaCount(
              data['No. of Visas Included'],
            );
            if (visasIncluded < _selectedVisaCount) {
              return false;
            }

            // Check activities allowed compatibility
            final activitiesAllowed = _parseActivityCount(
              data['No. of Activities Allowed'],
            );
            if (activitiesAllowed > 0 &&
                activitiesAllowed < _selectedActivities.length) {
              return false;
            }

            // Check emirate if not "Entire UAE"
            if (_selectedEmirate != 'Entire UAE') {
              final freezoneName = (data['Freezone'] ?? '')
                  .toString()
                  .toLowerCase();
              if (!freezoneName.contains(_selectedEmirate.toLowerCase())) {
                return false;
              }
            }

            return true;
          })
          .map((doc) {
            final data = doc.data();
            return {
              'id': doc.id,
              'freezone': data['Freezone'] ?? 'Unknown',
              'packageName': data['Package Name'] ?? 'N/A',
              'price': data['Price (AED)'] ?? 0,
              'visaCount': data['No. of Visas Included'] ?? 0,
              'activities': data['No. of Activities Allowed'] ?? 'N/A',
              'shareholders': data['No. of Shareholders Allowed'] ?? 'N/A',
              'tenure': data['Tenure (Years)'] ?? 'N/A',
              'visaEligibility': data['Visa Eligibility'] ?? 'N/A',
              'otherCosts': data['Other Costs / Notes'] ?? '',
            };
          })
          .toList();

      // Sort by price
      results.sort((a, b) {
        final priceA = _parsePrice(a['price']);
        final priceB = _parsePrice(b['price']);
        return priceA.compareTo(priceB);
      });

      setState(() {
        _packageResults = results.take(20).toList(); // Show top 20
        _isLoadingPackages = false;
      });

      if (_packageResults.isEmpty) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('No packages found matching your criteria'),
            ),
          );
        }
      }
    } catch (e) {
      setState(() {
        _isLoadingPackages = false;
      });
      if (mounted) {
        ScaffoldMessenger.of(
          context,
        ).showSnackBar(SnackBar(content: Text('Error finding packages: $e')));
      }
    }
  }

  // Simple fuzzy matching - checks if strings are similar
  bool _isFuzzyMatch(String str1, String str2) {
    if (str1.length < 3 || str2.length < 3) return false;

    // Check if one string contains most characters of the other
    int matchCount = 0;
    for (int i = 0; i < str2.length; i++) {
      if (str1.contains(str2[i])) {
        matchCount++;
      }
    }

    // If 70% or more characters match, consider it a fuzzy match
    return matchCount >= (str2.length * 0.7);
  }

  int _parseVisaCount(dynamic visaData) {
    if (visaData is int) return visaData;
    if (visaData is String) {
      final match = RegExp(r'\d+').firstMatch(visaData);
      return match != null ? int.parse(match.group(0)!) : 0;
    }
    return 0;
  }

  int _parseActivityCount(dynamic activityData) {
    if (activityData is int) return activityData;
    if (activityData is String) {
      // Handle "Unlimited" or similar text
      if (activityData.toLowerCase().contains('unlimited') ||
          activityData.toLowerCase().contains('any')) {
        return 999; // Large number to indicate unlimited
      }
      final match = RegExp(r'\d+').firstMatch(activityData);
      return match != null ? int.parse(match.group(0)!) : 0;
    }
    return 0;
  }

  double _parsePrice(dynamic price) {
    if (price is num) return price.toDouble();
    if (price is String) {
      final cleaned = price.replaceAll(RegExp(r'[^\d.]'), '');
      return double.tryParse(cleaned) ?? 0;
    }
    return 0;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text('Find Your Perfect Freezone'),
        elevation: 0,
        backgroundColor: Colors.blue[700],
      ),
      body: SingleChildScrollView(
        child: Column(
          children: [
            // Header Section
            Container(
              width: double.infinity,
              decoration: BoxDecoration(
                gradient: LinearGradient(
                  colors: [Colors.blue[700]!, Colors.blue[500]!],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
              ),
              padding: const EdgeInsets.all(24),
              child: Column(
                children: [
                  const Icon(
                    Icons.business_center,
                    size: 64,
                    color: Colors.white,
                  ),
                  const SizedBox(height: 16),
                  const Text(
                    'Smart Business Setup Finder',
                    style: TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Find the perfect freezone package in seconds',
                    style: TextStyle(
                      fontSize: 16,
                      color: Colors.white.withOpacity(0.9),
                    ),
                  ),
                ],
              ),
            ),

            // Sentence Builder Section
            Container(
              margin: const EdgeInsets.all(20),
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: Colors.black.withOpacity(0.1),
                    blurRadius: 10,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    '📝 Tell us about your business',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Activity Count Selector
                  Row(
                    children: [
                        Text(
                          'Activities:',
                        style: TextStyle(
                            fontSize: 15,
                          color: Colors.black87,
                            fontWeight: FontWeight.w600,
                        ),
                      ),
                        SizedBox(width: 8),
                      ...List.generate(3, (index) {
                        final count = index + 1;
                        final isSelected = _selectedActivityCount == count;
                        return Padding(
                            padding: EdgeInsets.only(right: 4),
                          child: ChoiceChip(
                            label: Text('$count'),
                            selected: isSelected,
                            onSelected: (selected) {
                              setState(() {
                                _selectedActivityCount = count;
                                // Remove excess activities if reducing count
                                if (_selectedActivities.length > count) {
                                  _selectedActivities = _selectedActivities
                                      .take(count)
                                      .toList();
                                }
                              });
                            },
                            selectedColor: Colors.blue[600],
                            labelStyle: TextStyle(
                              color: isSelected ? Colors.white : Colors.black87,
                              fontWeight: FontWeight.bold,
                                fontSize: 13,
                            ),
                              padding: EdgeInsets.symmetric(horizontal: 8, vertical: 2),
                          ),
                        );
                      }),
                        Spacer(),
                        Container(
                          padding: EdgeInsets.symmetric(horizontal: 10, vertical: 4),
                          decoration: BoxDecoration(
                            color: Colors.blue[50],
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text(
                            '${_selectedActivities.length}/$_selectedActivityCount',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.blue[700],
                              fontWeight: FontWeight.w600,
                            ),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 16),

                  // Display Selected Activities
                  if (_selectedActivities.isNotEmpty) ...[
                    Container(
                      padding: const EdgeInsets.all(12),
                      decoration: BoxDecoration(
                        color: Colors.green[50],
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.green[200]!),
                      ),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Row(
                            children: [
                              Icon(
                                Icons.check_circle,
                                color: Colors.green[700],
                                size: 20,
                              ),
                              const SizedBox(width: 8),
                              Text(
                                'Selected Activities:',
                                style: TextStyle(
                                  fontSize: 14,
                                  fontWeight: FontWeight.bold,
                                  color: Colors.green[900],
                                ),
                              ),
                            ],
                          ),
                          const SizedBox(height: 8),
                          Wrap(
                            spacing: 8,
                            runSpacing: 8,
                            children: _selectedActivities.map((activity) {
                              return Chip(
                                avatar: CircleAvatar(
                                  backgroundColor: Colors.green[700],
                                  child: const Icon(
                                    Icons.business,
                                    size: 16,
                                    color: Colors.white,
                                  ),
                                ),
                                label: Text(
                                  activity['name']!,
                                    Wrap(
                                      alignment: WrapAlignment.spaceBetween,
                                      crossAxisAlignment: WrapCrossAlignment.center,
                                      spacing: 8,
                                      runSpacing: 8,
                                ),
                                        Row(
                                          mainAxisSize: MainAxisSize.min,
                                          children: [
                                            const Text(
                                              'Activities: ',
                                              style: TextStyle(
                                                fontSize: 15,
                                                color: Colors.black87,
                                                fontWeight: FontWeight.w600,
                                              ),
                                            ),
                                            ...List.generate(3, (index) {
                                              final count = index + 1;
                                              final isSelected = _selectedActivityCount == count;
                                              return Padding(
                                                padding: const EdgeInsets.symmetric(horizontal: 3),
                                                child: ChoiceChip(
                                                  label: Text('$count'),
                                                  selected: isSelected,
                                                  onSelected: (selected) {
                                                    setState(() {
                                                      _selectedActivityCount = count;
                                                      // Remove excess activities if reducing count
                                                      if (_selectedActivities.length > count) {
                                                        _selectedActivities = _selectedActivities.take(count).toList();
                                                      }
                                                    });
                                                  },
                                                  selectedColor: Colors.blue[600],
                                                  labelStyle: TextStyle(
                                                    color: isSelected ? Colors.white : Colors.black87,
                                                    fontWeight: FontWeight.bold,
                                                    fontSize: 13,
                                                  ),
                                                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                                                ),
                                              );
                                            }),
                                          ],
                                  });
                                },
                                        Container(
                                          padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                                          decoration: BoxDecoration(
                                            color: Colors.blue[50],
                                            borderRadius: BorderRadius.circular(16),
                                          ),
                                          child: Text(
                                            '${_selectedActivities.length}/$_selectedActivityCount selected',
                                            style: TextStyle(
                                              fontSize: 12,
                                              color: Colors.blue[700],
                                              fontWeight: FontWeight.w600,
                                            ),
                                    _selectedActivities.length >=
                                        _selectedActivityCount
                                    ? 'Maximum activities selected'
                                    : 'Search and add activity (e.g., tech, consult)',
                                helperText: _isSearching
                                    ? 'Searching...'
                                    : _searchResults.isEmpty &&
                                          _activityController.text.isNotEmpty
                                    ? 'No results found'
                                    : _selectedActivities.length >=
                                          _selectedActivityCount
                                    ? 'Remove an activity to add a different one'
                                    : null,
                                helperStyle: TextStyle(
                                  color: _isSearching
                                      ? Colors.blue[700]
                                      : _selectedActivities.length >=
                                            _selectedActivityCount
                                      ? Colors.orange[700]
                                      : Colors.grey[600],
                                  fontSize: 11,
                                ),
                                prefixIcon: _isSearching
                                    ? const Padding(
                                        padding: EdgeInsets.all(12),
                                        child: SizedBox(
                                          width: 20,
                                          height: 20,
                                          child: CircularProgressIndicator(
                                            strokeWidth: 2,
                                          ),
                                        ),
                                      )
                                    : const Icon(Icons.search),
                                suffixIcon: _activityController.text.isNotEmpty
                                    ? IconButton(
                                        icon: const Icon(Icons.clear),
                                        onPressed: () {
                                          _activityController.clear();
                                          setState(() {
                                            _searchResults = [];
                                          });
                                        },
                                      )
                                    : null,
                                filled: true,
                                fillColor: Colors.blue[50],
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(12),
                                  borderSide: BorderSide.none,
                                ),
                                contentPadding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  vertical: 12,
                                ),
                              ),
                              onChanged: (value) {
                                setState(
                                  () {},
                                ); // Trigger rebuild for UI updates
                                _searchActivities(value);
                              },
                            ),
                            if (_searchResults.isNotEmpty) ...[
                              const SizedBox(height: 8),
                              Container(
                                constraints: const BoxConstraints(
                                  maxHeight: 250,
                                ),
                                decoration: BoxDecoration(
                                  color: Colors.white,
                                  borderRadius: BorderRadius.circular(12),
                                  border: Border.all(color: Colors.grey[300]!),
                                  boxShadow: [
                                    BoxShadow(
                                      color: Colors.black.withOpacity(0.1),
                                      blurRadius: 8,
                                    ),
                                  ],
                                ),
                                child: Column(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    // Header
                                    Container(
                                      padding: const EdgeInsets.symmetric(
                                        horizontal: 16,
                                        vertical: 8,
                                      ),
                                      decoration: BoxDecoration(
                                        color: Colors.blue[50],
                                        borderRadius: const BorderRadius.only(
                                          topLeft: Radius.circular(12),
                                          topRight: Radius.circular(12),
                                        ),
                                      ),
                                      child: Row(
                                        children: [
                                          Icon(
                                            Icons.search,
                                            size: 16,
                                            color: Colors.blue[700],
                                          ),
                                          const SizedBox(width: 8),
                                          Text(
                                            '${_searchResults.length} results found',
                                            style: TextStyle(
                                              fontSize: 12,
                                              fontWeight: FontWeight.w600,
                                              color: Colors.blue[700],
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                                    // Results list
                                    Flexible(
                                      child: ListView.builder(
                                        shrinkWrap: true,
                                        itemCount: _searchResults.length,
                                        itemBuilder: (context, index) {
                                          final result = _searchResults[index];
                                          return ListTile(
                                            dense: true,
                                            leading: CircleAvatar(
                                              radius: 18,
                                              backgroundColor: Colors.blue[100],
                                              child: Icon(
                                                Icons.business,
                                                size: 18,
                                                color: Colors.blue[700],
                                              ),
                                            ),
                                            title: Text(
                                              result['name'],
                                              style: const TextStyle(
                                                fontSize: 14,
                                                fontWeight: FontWeight.w500,
                                              ),
                                            ),
                                            subtitle: Text(
                                              '${result['sector']} • Code: ${result['activityCode']}',
                                              style: TextStyle(
                                                fontSize: 11,
                                                color: Colors.grey[600],
                                              ),
                                            ),
                                            onTap: () {
                                              // Check if we can add more activities
                                              if (_selectedActivities.length >=
                                                  _selectedActivityCount) {
                                                ScaffoldMessenger.of(
                                                  context,
                                                ).showSnackBar(
                                                  SnackBar(
                                                    content: Text(
                                                      'You can only select up to $_selectedActivityCount activities',
                                                    ),
                                                    duration: const Duration(
                                                      seconds: 2,
                                                    ),
                                                  ),
                                                );
                                                return;
                                              }

                                              // Check if already selected
                                              bool alreadySelected =
                                                  _selectedActivities.any(
                                                    (activity) =>
                                                        activity['id'] ==
                                                        result['id'],
                                                  );

                                              if (alreadySelected) {
                                                ScaffoldMessenger.of(
                                                  context,
                                                ).showSnackBar(
                                                  const SnackBar(
                                                    content: Text(
                                                      'This activity is already selected',
                                                    ),
                                                    duration: Duration(
                                                      seconds: 2,
                                                    ),
                                                  ),
                                                );
                                                return;
                                              }

                                              setState(() {
                                                _selectedActivities.add({
                                                  'id': result['id'],
                                                  'name': result['name'],
                                                });
                                                _activityController.clear();
                                                _searchResults = [];
                                              });
                                            },
                                          );
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),

                      const Text(
                        'business and I need',
                        style: TextStyle(fontSize: 18, color: Colors.black87),
                      ),

                      // Visa Count Dropdown
                      Container(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 8,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.green[50],
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.green[200]!),
                        ),
                          value: _selectedVisaCount,
                          underline: const SizedBox(),
                          icon: const Icon(
                            Icons.arrow_drop_down,
                                padding: const EdgeInsets.symmetric(horizontal: 4),
                          ),
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                          items: _visaCounts.map((count) {
                            return DropdownMenuItem(
                              value: count,
                              child: Text('$count'),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedVisaCount = value!;
                            });
                          },
                        ),
                      ),

                      Text(
                            Flexible(
                              child: Text(
                                '${_selectedActivities.length}/$_selectedActivityCount selected',
                                style: TextStyle(
                                  fontSize: 13,
                                  color: Colors.grey[600],
                                  fontWeight: FontWeight.w500,
                                ),
                                textAlign: TextAlign.right,
                                overflow: TextOverflow.ellipsis,
                        padding: const EdgeInsets.symmetric(
                          horizontal: 16,
                          vertical: 8,
                        ),
                        decoration: BoxDecoration(
                          color: Colors.orange[50],
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.orange[200]!),
                        ),
                        child: DropdownButton<String>(
                          value: _selectedEmirate,
                          underline: const SizedBox(),
                          icon: const Icon(
                            Icons.location_on,
                            color: Colors.orange,
                          ),
                          style: const TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.bold,
                            color: Colors.black87,
                          ),
                          items: _emirates.map((emirate) {
                            return DropdownMenuItem(
                              value: emirate,
                              child: Text(emirate),
                            );
                          }).toList(),
                          onChanged: (value) {
                            setState(() {
                              _selectedEmirate = value!;
                            });
                          },
                        ),
                      ),
                    ],
                  ),

                  const SizedBox(height: 32),

                  // Find Button
                  SizedBox(
                    width: double.infinity,
                    height: 56,
                    child: ElevatedButton(
                      onPressed: _isLoadingPackages ? null : _findPackages,
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue[700],
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                        elevation: 2,
                      ),
                      child: _isLoadingPackages
                          ? const CircularProgressIndicator(color: Colors.white)
                          : const Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(Icons.search, size: 24),
                                SizedBox(width: 12),
                                Text(
                                  'Find Best Packages',
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ],
                            ),
                    ),
                  ),
                ],
              ),
            ),

            // Results Section
            if (_packageResults.isNotEmpty) ...[
              Padding(
                padding: const EdgeInsets.symmetric(
                  horizontal: 20,
                  vertical: 8,
                ),
                child: Row(
                  children: [
                    const Icon(Icons.stars, color: Colors.amber, size: 28),
                    const SizedBox(width: 8),
                    Text(
                      'Found ${_packageResults.length} Perfect Matches',
                      style: const TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ],
                ),
              ),
              ListView.builder(
                shrinkWrap: true,
                physics: const NeverScrollableScrollPhysics(),
                padding: const EdgeInsets.all(20),
                itemCount: _packageResults.length,
                itemBuilder: (context, index) {
                  final package = _packageResults[index];
                  return _buildPackageCard(package);
                },
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildPackageCard(Map<String, dynamic> package) {
    final price = _parsePrice(package['price']);

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.08),
            blurRadius: 8,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.blue[600]!, Colors.blue[400]!],
              ),
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                const Icon(Icons.business, color: Colors.white, size: 32),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        package['freezone'],
                        style: const TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      Text(
                        package['packageName'],
                        style: TextStyle(
                          fontSize: 14,
                          color: Colors.white.withOpacity(0.9),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),

          // Details
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // Price
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.green[50],
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      const Icon(
                        Icons.attach_money,
                        color: Colors.green,
                        size: 32,
                      ),
                      Text(
                        'AED ${price.toStringAsFixed(0)}',
                        style: TextStyle(
                          fontSize: 28,
                          fontWeight: FontWeight.bold,
                          color: Colors.green[700],
                        ),
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 16),

                // Info Grid
                Row(
                  children: [
                    Expanded(
                      child: _buildInfoItem(
                        Icons.people,
                        'Visas',
                        '${package['visaCount']}',
                        Colors.blue,
                      ),
                    ),
                    Expanded(
                      child: _buildInfoItem(
                        Icons.work,
                        'Activities',
                        '${package['activities']}',
                        Colors.orange,
                      ),
                    ),
                    Expanded(
                      child: _buildInfoItem(
                        Icons.group,
                        'Shareholders',
                        '${package['shareholders']}',
                        Colors.purple,
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 12),

                Row(
                  children: [
                    Expanded(
                      child: _buildInfoItem(
                        Icons.schedule,
                        'Tenure',
                        '${package['tenure']} years',
                        Colors.teal,
                      ),
                    ),
                    Expanded(
                      child: _buildInfoItem(
                        Icons.verified_user,
                        'Visa Type',
                        package['visaEligibility'],
                        Colors.indigo,
                      ),
                    ),
                  ],
                ),

                if (package['otherCosts'] != null &&
                    package['otherCosts'].toString().isNotEmpty) ...[
                  const SizedBox(height: 12),
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.amber[50],
                      borderRadius: BorderRadius.circular(8),
                      border: Border.all(color: Colors.amber[200]!),
                    ),
                    child: Row(
                      children: [
                        Icon(
                          Icons.info_outline,
                          color: Colors.amber[700],
                          size: 20,
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Text(
                            package['otherCosts'],
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.amber[900],
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],

                const SizedBox(height: 16),

                // Action Button
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () {
                      // TODO: Navigate to package details or contact form
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text('Selected: ${package['packageName']}'),
                        ),
                      );
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.blue[700],
                      padding: const EdgeInsets.symmetric(vertical: 14),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'Get Started with This Package',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildInfoItem(
    IconData icon,
    String label,
    String value,
    Color color,
  ) {
    return Container(
      padding: const EdgeInsets.all(8),
      child: Column(
        children: [
          Icon(icon, color: color, size: 24),
          const SizedBox(height: 4),
          Text(label, style: TextStyle(fontSize: 11, color: Colors.grey[600])),
          Text(
            value,
            style: const TextStyle(fontSize: 13, fontWeight: FontWeight.bold),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
}
